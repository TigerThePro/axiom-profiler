<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>The usage is either:

AxiomProfiler.exe

(and then load log file through menu) or

AxiomProfiler.exe file1.bpl file2.bpl /l:logfile

The logfile can be obtained by running Z3 v2 with TRACE=true option. It goes to stdout. The overhead is about 50% in most cases. The option should not alter the search direction.
Although possible, it is not recommended to load logfiles with multiple checks.

QUANTIFIERS:

The top level entries in the tree are quantifiers. By clicking a quantifier, more information is displayed in the left panel.

After expanding a top level entry you get to choose if you want to see:
-	DEEP instances, i.e. instances that appeared only after long chains of dependencies
-	COSTLY instances, i.e. instances that caused a lot of other instances to be generated
-	FIRST and LAST instances from the log file
-	ALL instances of that quantifier from the log file

For each instance you get the following information:
The quantifier name, the line as a unique identifier, the depth and the cost. Clicking an instantiation shows the bindings, pattern that matched the quantifier body and the yield terms, if any.

The size of terms is given as two numbers: the first one is number of symbols (function applications and constants), the second one is maximal depth of the term.

After expanding an instantiation you get access to:
-	the terms that are BLAMED for the instantiation
-	the terms that are BOUND to free variables of the quantifier
-	YIELDS, i.e. the instantiations that blame the current instantiation for their existence
-	and the instantiations that we can blame for the current instantiation (they are given directly, at the top)

The depth of an instantiation is 1 + maximum of depths of instantiations that are blamed. The weighted depth of an instantiation is its weight (as determined from the Boogie {:weight ...} attribute) plus the maximum of weighted depths of blamed instantiations.

The initial cost of an instantiation is 1. If an instantiation has cost C and is blaming N other instantiation for its existence, C/N is added to the cost of each of those blamed.

The nodes in the tree corresponding to complex terms you can unfold.

GRAPH VIEW

The panel on the left shows a filtered view of the DAG given by the blame relations of the instantiations. By clicking instantiations, information is displayed in the left panel. All the operations above the graph view are only available when an instantiation is selected (except for redraw graph).

Show longest path: show a longest path going through the selected instatiation. Very helpful to find matching loops.
Explain path: Prints an explanation of the most expensive visible path through the selected instantiation. The path is also examined for possible matching loops. If one is found, a generalized explanation is printed before the concrete path explanation.

PRINTING RULES

To customize the appearance of terms in the info panel on the left, rewrite rules can be used. Rewrite rules match to terms by id, name + generic type and finally just name, in descending order of binding strength. The rewrite rules do support associativity and operator precedence in order to minimize the number of parentheses.


CONFLICTS

The top-level node labeled CONFLICTS gives access to all conflicts created during the search. 100 CONFLICTS gives a random, weighted sampling from the conflicts. The cost of a conflict is number of quantifier instantiations needed to deduce it. It is given as the first number in conflict description. Looking at SCOPES output is generally more useful than looking at bare conflicts.

SCOPES

They reflect the way the SMT solver performs the search: it performs a number of decisions (case-splits), finds a conflict clause and then backtracks from some decisions. Therefore one can think of the search as a tree, where nodes are labeled with literals and leafs are additionally labeled with conflicts. There are however very long sequences of nodes with just one child. We collapse such sequences into a single node and label it with entire sequence of literals. The SCOPE tree is exactly this tree with some addition information.

Each decision can cause other literals to be asserted. Those are called implied literals.

The asserted literals can give rise to quantifier instantiations. Such instantiations are accounted to the current scope.

The scope entries are described as follows:

Scope: &lt;total instances&gt; / &lt;current-level instances&gt;, &lt;decisions&gt; lits, &lt;child scope#&gt; children [rec: &lt;descended scope#&gt;, &lt;cost&gt; inst/cnfl]

where &lt;total instances&gt; is the total number of instances for this scope and childe scopes, &lt;current-level instances&gt; is the # of instances in the current scope only, &lt;decisions&gt; is the number of decision literals, &lt;child scope#&gt; is the number of child scopes (children in the search tree) of the current scope, while &lt;descended scope#&gt; is the same number but applied transitively, finally &lt;cost&gt; is the average cost in instance of a conflict generated from this scope (that is &lt;total instances&gt;/&lt;descended scope#&gt;).

Each scope has a list of literals and children scopes when you unfold it.

Each literal has again several nodes attached as children:
-	its explanation (which is irrelevant for decision literals, and kind of cryptic anyhow)
-	the literals that it implied
-	and in case it was a decision literal made during left-to-right case-splitting search, an entry showing the clause that contained the literal</value>
  </data>
</root>